{"version":3,"sources":["components/Feedback/FeedbackOptions.styled.js","components/Feedback/FeedbackOptions.js","components/Section/Section.styled.jsx","components/Section/SectionTitle.js","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.js","components/App.js","index.js"],"names":["BtnList","styled","ul","Item","li","Button","button","FeedbackOptions","getRandom","min","max","Math","ceil","random","this","props","options","map","el","type","name","onClick","onLeaveFeedback","Component","Title","h1","Section","section","SectionTitle","title","children","Insert","p","Statistics","good","neutral","bad","total","percentage","App","state","countPercentage","totalFeedbacks","countFeedbacks","trunc","Object","values","reduce","previousValue","currentValue","handleScore","e","target","setState","prevState","stateKeys","keys","style","fontSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAEaA,EAAUC,IAAOC,GAAV,qGAMPC,EAAOF,IAAOG,GAAV,2FAMJC,EAASJ,IAAOK,OAAV,4vB,OCVbC,E,4MACJC,UAAY,SAACC,EAAKC,GAChB,OAAOC,KAAKC,KAAKD,KAAKE,UAAYH,EAAMD,GAAOA,I,4CAGjD,WAAU,IAAD,OACP,OACE,cAACT,EAAD,UACGc,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GACtB,OACE,cAACf,EAAD,UACE,cAACE,EAAD,CACEc,KAAK,SACLC,KAAMF,EACNG,QAAS,EAAKN,MAAMO,gBAHtB,SAKGJ,KANMA,Y,GAVOK,aA+BfhB,ICjCFiB,EAAQvB,IAAOwB,GAAV,mEAKLC,EAAUzB,IAAO0B,QAAV,4CCSLC,EAbM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACE,eAACJ,EAAD,WACE,cAACF,EAAD,UAAQK,IACPC,MCLMC,EAAS9B,IAAO+B,EAAV,mECEEC,E,4JACnB,WACE,MAAkDnB,KAAKC,MAA/CmB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,WACnC,OACE,+BACE,6BACE,eAACP,EAAD,oBAAeG,OAEjB,6BACE,eAACH,EAAD,uBAAkBI,OAEpB,6BACE,eAACJ,EAAD,mBAAcK,OAEhB,6BACE,eAACL,EAAD,qBAAgBM,OAElB,6BACE,eAACN,EAAD,iCAA4BO,EAA5B,iB,GAlB8Bf,aCEnBgB,E,4MACnBC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,gBAAkB,WAChB,IAAMC,EAAiB,EAAKC,iBAE5B,OADiBhC,KAAKiC,MAAO,EAAKJ,MAAMN,KAAOQ,EAAkB,M,EAInEC,eAAiB,WAKf,OAJkBE,OAAOC,OAAO,EAAKN,OACFO,QACjC,SAACC,EAAeC,GAAhB,OAAiCD,EAAgBC,M,EAKrDC,YAAc,SAAAC,GACZ,IAAQ/B,EAAS+B,EAAEC,OAAXhC,KACR,EAAKiC,UAAS,SAAAC,GACZ,OAAO,eACJlC,EAAOkC,EAAUlC,GAAQ,O,4CAKhC,WACE,IAAMmC,EAAYV,OAAOW,KAAK1C,KAAK0B,OACnC,OACE,qCACE,cAAC,EAAD,CAAcX,MAAM,wBAApB,SACE,cAAC,EAAD,CACEb,QAASuC,EACTjC,gBAAiBR,KAAKoC,gBAG1B,cAAC,EAAD,CAAcrB,MAAM,aAApB,SAC6B,IAA1Bf,KAAK6B,iBACJ,mBAAGc,MAAO,CAAEC,SAAU,IAAtB,+BAEA,cAAC,EAAD,CACExB,KAAMpB,KAAK0B,MAAMN,KACjBC,QAASrB,KAAK0B,MAAML,QACpBC,IAAKtB,KAAK0B,MAAMJ,IAChBC,MAAOvB,KAAK6B,iBACZL,WAAYxB,KAAK2B,6B,GAjDElB,aCDjCoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.deeac971.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const BtnList = styled.ul`\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: center;\n  width: 200px;\n`;\n\nexport const Button = styled.button`\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n  font-size: 25px;\n  color: #fff;\n  cursor: pointer;\n  display: block;\n  position: relative;\n  border: 2px solid #f7ca18;\n  transition: all 0.4s cubic-bezier(0215, 0.61, 0.355, 1) 0s;\n  background: #353535;\n  :hover {\n    color: #000 !important;\n    background-color: transparent;\n    text-shadow: none;\n  }\n  :hover:before {\n    bottom: 0%;\n    top: auto;\n    height: 100%;\n  }\n  :before {\n    display: block;\n    position: absolute;\n    left: 0px;\n    top: 0px;\n    height: 0px;\n    width: 100%;\n    z-index: -1;\n    content: '';\n    color: #000 !important;\n    background: #f7ca18;\n    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1) 0s;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { BtnList, Item, Button } from './FeedbackOptions.styled';\n\nclass FeedbackOptions extends Component {\n  getRandom = (min, max) => {\n    return Math.ceil(Math.random() * (max - min) + min);\n  };\n\n  render() {\n    return (\n      <BtnList>\n        {this.props.options.map(el => {\n          return (\n            <Item key={el}>\n              <Button\n                type=\"button\"\n                name={el}\n                onClick={this.props.onLeaveFeedback}\n              >\n                {el}\n              </Button>\n            </Item>\n          );\n        })}\n      </BtnList>\n    );\n  }\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func,\n};\n\nexport default FeedbackOptions;\n","import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h1`\r\ntext-align: center;\r\nfont-size: 25px;\r\n`\r\n\r\nexport const Section = styled.section`\r\npadding: 20px;\r\n`","import { Section, Title } from './Section.styled';\nimport PropTypes from 'prop-types';\n\nconst SectionTitle = ({ title, children }) => {\n  return (\n    <Section>\n      <Title>{title}</Title>\n      {children}\n    </Section>\n  );\n};\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default SectionTitle;\n","import styled from '@emotion/styled';\n\nexport const Insert = styled.p`\n  font-size: 25px;\n  color: #353535;\n`;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Insert } from './Statistics.styled';\n\nexport default class Statistics extends Component {\n  render() {\n    const { good, neutral, bad, total, percentage } = this.props;\n    return (\n      <ul>\n        <li>\n          <Insert>Good: {good}</Insert>\n        </li>\n        <li>\n          <Insert>Neutral: {neutral}</Insert>\n        </li>\n        <li>\n          <Insert>Bad: {bad}</Insert>\n        </li>\n        <li>\n          <Insert>Total: {total}</Insert>\n        </li>\n        <li>\n          <Insert>Positive feedback: {percentage} %</Insert>\n        </li>\n      </ul>\n    );\n  }\n}\n","import './App.css';\nimport FeedbackOptions from './Feedback';\nimport SectionTitle from './Section';\nimport Statistics from './Statistics';\nimport React, { Component } from 'react';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countPercentage = () => {\n    const totalFeedbacks = this.countFeedbacks();\n    const percents = Math.trunc((this.state.good / totalFeedbacks) * 100);\n    return percents;\n  };\n\n  countFeedbacks = () => {\n    const feedbacks = Object.values(this.state);\n    const countedFeedbacks = feedbacks.reduce(\n      (previousValue, currentValue) => previousValue + currentValue,\n    );\n    return countedFeedbacks;\n  };\n\n  handleScore = e => {\n    const { name } = e.target;\n    this.setState(prevState => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n\n  render() {\n    const stateKeys = Object.keys(this.state);\n    return (\n      <>\n        <SectionTitle title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={stateKeys}\n            onLeaveFeedback={this.handleScore}\n          />\n        </SectionTitle>\n        <SectionTitle title=\"Statistics\">\n          {this.countFeedbacks() === 0 ? (\n            <p style={{ fontSize: 25 }}>No feedback given</p>\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countFeedbacks()}\n              percentage={this.countPercentage()}\n            />\n          )}\n        </SectionTitle>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}